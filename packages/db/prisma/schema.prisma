generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  refresh_token_expires_in Int?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  name          String?
  admin         Boolean     @default(false)
  accounts      Account[]
  quizScores    QuizScore[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Track {
  id          String          @id @default(uuid())
  title       String
  description String
  image       String
  hidden      Boolean         @default(false)
  createdAt   DateTime        @default(now())
  inSearch    Boolean         @default(false)
  cohort      Int             @default(0)
  canvaLink   String?
  trackType   TrackType       @default(NOTION)
  categories  TrackCategory[]
  problems    TrackProblems[]
}

model Categories {
  id       String          @id @default(uuid())
  category String
  tracks   TrackCategory[]
}

model TrackCategory {
  trackId    String
  categoryId String
  category   Categories @relation(fields: [categoryId], references: [id])
  track      Track      @relation(fields: [trackId], references: [id])

  @@id([trackId, categoryId])
}

model Problem {
  id            String          @id @default(uuid())
  title         String
  description   String
  notionDocId   String
  type          ProblemType
  mcqQuestions  MCQQuestion[]
  quizScores    QuizScore[]
  trackProblems TrackProblems[]
}

model TrackProblems {
  trackId      String
  problemId    String
  sortingOrder Int
  problem      Problem @relation(fields: [problemId], references: [id])
  track        Track   @relation(fields: [trackId], references: [id])

  @@id([trackId, problemId])
}

model MCQQuestion {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctOption String
  problemId     String
  problem       Problem  @relation(fields: [problemId], references: [id])
}

model QuizScore {
  id        String   @id @default(uuid())
  score     Int
  userId    String?
  problemId String
  createdAt DateTime @default(now())
  problem   Problem  @relation(fields: [problemId], references: [id])
  user      User?    @relation(fields: [userId], references: [id])
}

enum ProblemType {
  Blog
  MCQ
}

enum TrackType {
  NOTION
  CANVA
}
